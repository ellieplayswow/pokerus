// @todo: impl Into<String>
fetch('https://raw.githubusercontent.com/Purukitto/pokemon-data.json/refs/heads/master/pokedex.json')
    .then(res => res.json())
    .then(res => {
        let rust = `/*
\tAUTOGENERATED
\tThis file has been automatically generated by generators/species.js. The generator should be
\tedited, not this file.

\tData source: https://raw.githubusercontent.com/Purukitto/pokemon-data.json/refs/heads/master/pokedex.json
*/
#[derive(Debug)]
pub enum Species {`
        for (const pokemon of res) {
            let name = pokemon.name.english
                .replace('♀', ' Female')
                .replace('♂', ' Male')
                .normalize('NFKD')
                .replace(/\w\S*/g, function(text) { return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase() })
                .replace(/\W/g, '');
            rust += '\n\t' + `${name} = ${pokemon.id},`;
        }
        rust += `}

impl From<u16> for Species {
    fn from(value: u16) -> Self {
        match value {`;

        for (const pokemon of res) {
            let name = pokemon.name.english
                .replace('♀', ' Female')
                .replace('♂', ' Male')
                .normalize('NFKD')
                .replace(/\w\S*/g, function(text) { return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase() })
                .replace(/\W/g, '');
            rust += '\n\t\t\t' + `${pokemon.id} => Species::${name},`;
        }
        rust += `
            _ => unreachable!()
        }
    }
}`;
        Bun.write('../src/save/data/species.rs', rust);
    });